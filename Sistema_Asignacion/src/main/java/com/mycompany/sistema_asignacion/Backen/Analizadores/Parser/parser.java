
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package com.mycompany.sistema_asignacion.Backen.Analizadores.Parser;

import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Analizadores.token;
import com.mycompany.sistema_asignacion.Backen.Analizadores.Lexer.Lexer;
import com.mycompany.sistema_asignacion.Backen.EDD.*;
import com.mycompany.sistema_asignacion.Backen.Exceptions.*;
import com.mycompany.sistema_asignacion.Backen.Objetos.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\016\000\002\002" +
    "\014\000\002\002\010\000\002\002\016\000\002\002\014" +
    "\000\002\002\014\000\002\002\024\000\002\002\016\000" +
    "\002\002\002\000\002\002\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\026\002\ufff8\003\004\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\001\002" +
    "\000\024\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\001\002\000\024\002\013" +
    "\004\010\005\007\006\012\007\011\010\014\011\015\012" +
    "\006\013\016\001\002\000\004\021\117\001\002\000\004" +
    "\021\107\001\002\000\004\021\075\001\002\000\004\021" +
    "\071\001\002\000\004\021\061\001\002\000\004\002\001" +
    "\001\002\000\004\021\051\001\002\000\004\021\034\001" +
    "\002\000\004\021\017\001\002\000\004\016\020\001\002" +
    "\000\004\023\021\001\002\000\010\003\023\016\024\025" +
    "\022\001\002\000\006\022\ufff3\023\ufff3\001\002\000\006" +
    "\022\ufff1\023\ufff1\001\002\000\006\022\ufff2\023\ufff2\001" +
    "\002\000\004\023\026\001\002\000\010\003\023\016\024" +
    "\025\022\001\002\000\004\023\030\001\002\000\010\003" +
    "\023\016\024\025\022\001\002\000\004\022\032\001\002" +
    "\000\004\024\033\001\002\000\024\002\ufff9\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9" +
    "\001\002\000\010\003\023\016\024\025\022\001\002\000" +
    "\004\023\036\001\002\000\010\003\040\017\037\020\041" +
    "\001\002\000\006\022\ufff6\023\ufff6\001\002\000\006\022" +
    "\ufff4\023\ufff4\001\002\000\006\022\ufff5\023\ufff5\001\002" +
    "\000\004\023\043\001\002\000\010\003\023\016\024\025" +
    "\022\001\002\000\004\023\045\001\002\000\010\003\023" +
    "\016\024\025\022\001\002\000\004\022\047\001\002\000" +
    "\004\024\050\001\002\000\024\002\ufffd\004\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\001" +
    "\002\000\004\017\052\001\002\000\004\023\053\001\002" +
    "\000\010\003\023\016\024\025\022\001\002\000\004\023" +
    "\055\001\002\000\010\003\023\016\024\025\022\001\002" +
    "\000\004\022\057\001\002\000\004\024\060\001\002\000" +
    "\024\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\001\002\000\010\003\023\016" +
    "\024\025\022\001\002\000\004\023\063\001\002\000\010" +
    "\003\040\017\037\020\041\001\002\000\004\023\065\001" +
    "\002\000\010\003\040\017\037\020\041\001\002\000\004" +
    "\022\067\001\002\000\004\024\070\001\002\000\024\002" +
    "\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\012\ufffc\013\ufffc\001\002\000\004\017\072\001\002\000" +
    "\004\022\073\001\002\000\004\024\074\001\002\000\024" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\012\ufffe\013\ufffe\001\002\000\010\003\023\016\024" +
    "\025\022\001\002\000\004\023\077\001\002\000\004\015" +
    "\100\001\002\000\004\023\101\001\002\000\004\017\102" +
    "\001\002\000\004\023\103\001\002\000\004\014\104\001" +
    "\002\000\004\022\105\001\002\000\004\024\106\001\002" +
    "\000\024\002\000\004\000\005\000\006\000\007\000\010" +
    "\000\011\000\012\000\013\000\001\002\000\004\016\110" +
    "\001\002\000\004\023\111\001\002\000\010\003\040\017" +
    "\037\020\041\001\002\000\004\023\113\001\002\000\010" +
    "\003\040\017\037\020\041\001\002\000\004\022\115\001" +
    "\002\000\004\024\116\001\002\000\024\002\uffff\004\uffff" +
    "\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013" +
    "\uffff\001\002\000\010\003\023\016\024\025\022\001\002" +
    "\000\004\023\121\001\002\000\004\027\122\001\002\000" +
    "\004\023\123\001\002\000\004\026\124\001\002\000\004" +
    "\023\125\001\002\000\010\003\023\016\024\025\022\001" +
    "\002\000\004\023\127\001\002\000\010\003\023\016\024" +
    "\025\022\001\002\000\004\023\131\001\002\000\010\003" +
    "\040\017\037\020\041\001\002\000\004\023\133\001\002" +
    "\000\010\003\023\016\024\025\022\001\002\000\004\022" +
    "\135\001\002\000\004\024\136\001\002\000\024\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\026\001\001\000\002\001" +
    "\001\000\004\003\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\034\001\001\000" +
    "\002\001\001\000\004\004\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\043\001\001\000\002\001\001\000\004\003\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\053" +
    "\001\001\000\002\001\001\000\004\003\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\061\001\001\000\002\001\001\000\004\004\063\001" +
    "\001\000\002\001\001\000\004\004\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\111\001\001\000\002\001\001\000\004\004\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\125\001\001\000\002\001\001\000\004\003" +
    "\127\001\001\000\002\001\001\000\004\004\131\001\001" +
    "\000\002\001\001\000\004\003\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



           
    private DatosSistema datos;
    private Cola<String> errores;
    private TraductorErrores traductor;

    public parser(Lexer lex,DatosSistema datos,Cola<String> errores){
        super(lex);
        this.traductor = new TraductorErrores();
        this.datos = datos;
        this.errores = errores;
    }

    public void report_error(String message, Object info){
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info){
        System.out.println("reportfatal");
    }

    public void syntax_error(Symbol cur_token){
        token tok = (token) cur_token.value;
        String err = "Error sintactico { "+tok.getLexeme()+" } se esperaba[";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            if (!traductor.tokenEsperado(expected_token_ids().get(i)).equals("")) {
                err = err + traductor.tokenEsperado(expected_token_ids().get(i));
                if (i < (expected_token_ids().size() - 1)) {
                    err = err + " ó ";
                }
            }
        }
        err = err +"] Linea: "+tok.getLine()+",Columna: "+tok.getColumn();
        System.out.println(err);
        errores.agregar(err);
    }

    protected int error_sync_size() {
        return 1;
    }

    public Cola<String> getErrores(){
        return errores;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= exp EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // exp ::= exp USER P_A nums COMA ALFANUMERICO COMA STRING COMA TIPO_USER P_C DOT_COMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int passleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int passright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pass = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tipoUserleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tipoUserright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipoUser = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int id = Integer.valueOf(((token)identificador).getLexeme());
            Usuario newUser = new Usuario(id, ((token)nombre).getLexeme(), ((token)pass).getLexeme(), ((token)tipoUser).getLexeme());
            if(datos.getUsuarios().buscar(newUser)==null)
            {
                try {
                  switch (newUser.getTipo()) {
                    case "colaborador":
                        datos.getUsuarios().add(newUser, newUser.getNombre());
                        break;
                    case "estudiante":
                        Estudiante tmpEstudiante = new Estudiante(newUser.getId(), "", "");
                        if(datos.getEstudiantes().buscar(tmpEstudiante, tmpEstudiante.hashCode())!=null){
                            datos.getUsuarios().add(newUser, newUser.getNombre());
                        }else{
                            errores.agregar("No existe refencia del estudiante, Linea: "+((token)identificador).getLine()+" Columna: "+((token)identificador).getColumn());  
                        }
                        break;
                    case "super":
                        errores.agregar("No pude cargar un usuario super en el sistema, Linea: "+((token)tipoUser).getLine()+" Columna: "+((token)tipoUser).getColumn());
                        break;
                    default:
                        errores.agregar("Tipo de usuario no reconocido, Linea: "+((token)tipoUser).getLine()+" Columna: "+((token)tipoUser).getColumn());
                  }
                } catch (CloneNodeException e) {
                    errores.agregar("Ya existe un usuario \""+newUser.getNombre()+"\" en el sistema, Linea: "+((token)nombre).getLine()+" Columna: "+((token)nombre).getColumn());
                }
            }else{
                errores.agregar("Ya existe un usuario con id \""+newUser.getId()+"\" en el sistema, Linea: "+((token)identificador).getLine()+" Columna: "+((token)identificador).getColumn());
            }
            System.out.println("--------Usuario-------");
            System.out.println(newUser.toString());
            System.out.println("----------------------");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp ::= exp ESTU P_A CARNET COMA cadenas COMA cadenas P_C DOT_COMA 
            {
              Object RESULT =null;
		int carnetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int carnetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object carnet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object direccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int idCarnet =  Integer.valueOf(((token)carnet).getLexeme());
            Estudiante newEstudiante = new Estudiante(idCarnet, ((token)nombre).getLexeme(), ((token)direccion).getLexeme());
            try {
              datos.getEstudiantes().add(newEstudiante,newEstudiante.hashCode());
            } catch (CloneNodeException ex) {
              errores.agregar("Ya existe un estudiante con carnet \""+newEstudiante.getCarnet()+"\" en el sistema, Linea: "+((token)carnet).getLine()+",Columna:"+((token)carnet).getColumn());
            }
            System.out.println("------Estudiante------");
            System.out.println(newEstudiante.toString());
            System.out.println("----------------------");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= exp EDIF P_A STRING P_C DOT_COMA 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            Edificio newEdificio = new Edificio(((token)nombre).getLexeme());
            try {
              datos.getEdificios().add(newEdificio, newEdificio.getNombre());
            } catch (CloneNodeException ex) {
                errores.agregar("Ya existe un edificio:" + newEdificio.getNombre());
            }
            System.out.println("-------Edificio-------");
            System.out.println(newEdificio.toString());
            System.out.println("----------------------");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= exp CURSO P_A nums COMA cadenas COMA nums COMA nums P_C DOT_COMA 
            {
              Object RESULT =null;
		int codigoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int codigoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object codigo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int semestreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int semestreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object semestre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int creditosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int creditosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object creditos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int numSemestre = Integer.valueOf(((token)semestre).getLexeme());
            
            if(numSemestre>0&&numSemestre<=10){
              Curso newCurso = new Curso(Integer.valueOf(((token)codigo).getLexeme()), ((token)nombre).getLexeme(), numSemestre, Integer.valueOf(((token)creditos).getLexeme()));
              try {
                datos.getCursos().addOrden(newCurso, String.valueOf(newCurso.getCodigo()));

                System.out.println("---------Curso--------");
                System.out.println(newCurso.toString());
                System.out.println("----------------------");

              } catch (CloneNodeException ex) {
                errores.agregar("Ya existe un curso con codigo \""+newCurso.getCodigo()+"\" ,Linea: "+((token)codigo).getLine()+" Columna: "+((token)codigo).getColumn());
              }
            }else{
              errores.agregar("Error Semantico: el numero asociado al semestre debe ser entre el rango [1 - 10], Linea: "+((token)semestre).getLine()+",Columna: "+((token)semestre).getColumn());
            }

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= exp CATE P_A nums COMA cadenas COMA cadenas P_C DOT_COMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object identificador = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int direccionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int direccionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object direccion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int id = Integer.valueOf(((token)identificador).getLexeme());
            Catedratico newCatedratico = new Catedratico(id, ((token)nombre).getLexeme(),((token)direccion).getLexeme());
            System.out.println("-----Catedratico------");
            System.out.println(newCatedratico.toString());
            System.out.println("----------------------");
            try {
              datos.getCatedraticos().agregar(((token)identificador).getLexeme(), newCatedratico);
            } catch (CloneNodeException ex) {
              errores.agregar("Ya existe un Catedratico con identificador: "+((token)identificador).getLexeme()+", Linea: "+((token)identificador).getLine()+",Columna: "+((token)identificador).getColumn());
            }catch(NullTagException ex){
              errores.agregar("No se esta asignando un identificador al Catedratico, Linea: "+((token)identificador).getLine()+",Columna: "+((token)identificador).getColumn());
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // exp ::= exp SALON P_A STRING COMA nums COMA nums P_C DOT_COMA 
            {
              Object RESULT =null;
		int edificioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int edificioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object edificio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int capacidadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int capacidadright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object capacidad = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int numeroSalon = Integer.valueOf(((token)numero).getLexeme());
            int cantidadEstudiantes = Integer.valueOf(((token)capacidad).getLexeme());
            String edi = ((token)edificio).getLexeme();

            try {
              Edificio recuEdificio =  datos.getEdificios().buscar(edi);

              if(recuEdificio!=null){
                Salon newSalon = new Salon(numeroSalon, cantidadEstudiantes, edi);
                recuEdificio.getSalones().agregarOrden(newSalon,String.valueOf(newSalon.getNumeroSalon()));

                System.out.println("---------Salon--------");
                System.out.println(newSalon.toString());
                System.out.println("----------------------");

              }else{
                errores.agregar("No existe un edificio \""+edi+"\", Linea: "+((token)edificio).getLine()+" ,Columna: "+((token)edificio).getColumn());
              }
            } catch (CloneNodeException ex) {
              errores.agregar("Ya existe un salon \""+numeroSalon+"\" en el edificio \""+edi+"\", Linea: "+((token)numero).getLine()+" ,Columna: "+((token)numero).getColumn());
            }catch(InvalidStructureException ex){
              errores.agregar("Error al guardar el salon: "+numeroSalon);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // exp ::= exp HORARIO P_A nums COMA CADENA_HORARIO COMA CADENA_DIA COMA nums COMA nums COMA cadenas COMA nums P_C DOT_COMA 
            {
              Object RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Object code = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int horarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int horarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object horario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int dialeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int diaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object dia = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int cursoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cursoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object curso = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int salonleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int salonright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object salon = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int edificioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int edificioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object edificio = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int catedraticoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int catedraticoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object catedratico = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int codigo = Integer.valueOf(((token)code).getLexeme());
            String hour = ((token)horario).getLexeme();
            String day = ((token)dia).getLexeme();
            int codeCurso = Integer.valueOf(((token)curso).getLexeme());
            int numSalon = Integer.valueOf(((token)salon).getLexeme());
            String edi = ((token)edificio).getLexeme();
            int idCatedratico = Integer.valueOf(((token)catedratico).getLexeme());

            Horario newHorario = new Horario(codigo, hour, day, codeCurso, numSalon, edi, idCatedratico);
            try {
                Edificio tmpEdificio = datos.getEdificios().buscar(edi);
                if(tmpEdificio!=null){
                    Curso tmpCurso = datos.getCursos().buscar(String.valueOf(codeCurso));
                    
                    if(tmpCurso!=null){
                        Salon tmpSalon = tmpEdificio.getSalones().buscar(String.valueOf(numSalon));
                        if(tmpSalon!=null){
                            Catedratico tmpCatedratico = datos.getCatedraticos().buscar(String.valueOf(idCatedratico));
                            if(tmpCatedratico!=null){
                                datos.getHorarios().agregar(String.valueOf(newHorario.getCodigo()), newHorario);
                                System.out.println("--------Horario-------");
                                System.out.println(newHorario.toString());
                                System.out.println("----------------------");
                            }else{
                                errores.agregar("No existe el catedratico \""+idCatedratico+"\" en el sistema, Linea: "+(((token)catedratico).getLine())+",Columna: "+(((token)catedratico).getColumn()));
                            }
                        }else{
                            errores.agregar("No existe un salon \""+numSalon+"\" en el edificio \""+edi+"\", Linea: "+(((token)salon).getLine())+",Columna: "+(((token)salon).getColumn()));
                        }
                    }else{
                        errores.agregar("No existe un curso con codigo \""+codeCurso+"\" en el sistema, Linea: "+(((token)curso).getLine())+",Columna: "+(((token)curso).getColumn()));
                    }
                }else{
                    errores.agregar("No existe un edificio \""+edi+"\" en el sistema, Linea: "+(((token)edificio).getLine())+",Columna: "+(((token)edificio).getColumn()));
                }
            } catch (CloneNodeException ex) {
                errores.agregar("Ya existe un horario con el tag \""+codigo+"\" en el sistema, Linea: "+(((token)code).getLine())+",Columna: "+(((token)code).getColumn()));
            } catch(NullTagException ex){
                errores.agregar("Debe de agregar un codigo de identificacion para el horario");
            }

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // exp ::= exp ASIG P_A CARNET COMA nums COMA nums COMA nums P_C DOT_COMA 
            {
              Object RESULT =null;
		int _carnetleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _carnetright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object _carnet = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _horarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _horarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object _horario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _zonaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _zonaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object _zona = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _finalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _finalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _final = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            int carnet = Integer.valueOf(((token)_carnet).getLexeme());
            int horario = Integer.valueOf(((token)_horario).getLexeme());
            int zona = Integer.valueOf(((token)_zona).getLexeme());
            int final_ = Integer.valueOf(((token)_final).getLexeme());
            
            Asignacion newAsignacion = new Asignacion(carnet, horario, zona, final_);

            Estudiante tmpEstudiante = new Estudiante(carnet, "", "");
            tmpEstudiante = datos.getEstudiantes().buscar(tmpEstudiante,tmpEstudiante.hashCode());
            
            if(tmpEstudiante!=null){
                
                Horario tmpHorario = datos.getHorarios().buscar(String.valueOf(horario));
                if(tmpHorario!=null){
                    int calculo = zona +final_;
                    if(calculo <=100){
                        Edificio tmpEdificio = datos.getEdificios().buscar(tmpHorario.getEdificio());
                        Salon tmpSalon = tmpEdificio.getSalones().buscar(String.valueOf(tmpHorario.getSalon()));
                        int capacidad = tmpSalon.getCantidadEstudiantes();
                        int asignados = tmpHorario.getAsignaciones().getLegth();
                        if(asignados < capacidad){
                            try {
                                tmpHorario.getAsignaciones().addOrden(newAsignacion, String.valueOf(newAsignacion.getCarnet()));
                                tmpEstudiante.getHorarios().agregar(String.valueOf(tmpHorario.getCodigo()),tmpHorario);
                                System.out.println("------Asignacion------");
                                System.out.println(newAsignacion.toString());
                                System.out.println("----------------------");   
                            } catch (CloneNodeException ex ){
                                errores.agregar("El estudiante \""+carnet+"\" ya esta asignado al curso, Linea: "+(((token)_carnet).getLine())+",Columna: "+(((token)_carnet).getColumn()));
                            }
                            catch(NullTagException e) {
                                errores.agregar("Error al guardar la asignacion");
                            }
                        }else{
                            errores.agregar("Ya no se admiten asignaciones en el horario \""+tmpHorario.getCodigo()+"\" capacidad superada, Linea: "+(((token)_horario).getLine())+",Columna: "+(((token)_horario).getColumn()));
                        }
                    }else{
                        errores.agregar("La zona y final debe ser menor o igual a 1000, Linea: "+(((token)_zona).getLine())+",Columna: "+(((token)_zona).getColumn()));
                        errores.agregar("La zona y final debe ser menor o igual a 1000, Linea: "+(((token)_final).getLine())+",Columna: "+(((token)_final).getColumn()));
                    }
                }else{
                    errores.agregar("No existe un horario con id \""+horario+"\" en el sistema, Linea: "+(((token)_horario).getLine())+",Columna: "+(((token)_horario).getColumn()));
                }
            }else{
                errores.agregar("No existe un estudiante con carnet \""+carnet+"\" en el sistema, Linea: "+(((token)_carnet).getLine())+",Columna: "+(((token)_carnet).getColumn()));
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cadenas ::= STRING 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cadenas ::= STRING_SPACE 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cadenas ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cadenas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nums ::= NUMERO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nums ::= CARNET 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =e1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nums ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nums",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
