package com.mycompany.sistema_asignacion.Backen.Analizadores.Parser;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Analizadores.token;
import com.mycompany.sistema_asignacion.Backen.Analizadores.Lexer.Lexer;
import com.mycompany.sistema_asignacion.Backen.EDD.*;
import com.mycompany.sistema_asignacion.Backen.Exceptions.*;
import com.mycompany.sistema_asignacion.Backen.Objetos.*;

import java_cup.runtime.Symbol;

parser code {:
           
    private DatosSistema datos;
    private Cola<String> errores;
    private TraductorErrores traductor;

    public parser(Lexer lex,DatosSistema datos,Cola<String> errores){
        super(lex);
        this.traductor = new TraductorErrores();
        this.datos = datos;
        this.errores = errores;
    }

    public void report_error(String message, Object info){
        System.out.println("reporterror");
    }
    public void report_fatal_error(String message, Object info){
        System.out.println("reportfatal");
    }

    public void syntax_error(Symbol cur_token){
        token tok = (token) cur_token.value;
        String err = "Error sintactico { "+tok.getLexeme()+" } se esperaba[";
        for (int i = 0; i < expected_token_ids().size(); i++) {
            if (!traductor.tokenEsperado(expected_token_ids().get(i)).equals("")) {
                err = err + traductor.tokenEsperado(expected_token_ids().get(i));
                if (i < (expected_token_ids().size() - 1)) {
                    err = err + " รณ ";
                }
            }
        }
        err = err +"] Linea: "+tok.getLine()+",Columna: "+tok.getColumn();
        System.out.println(err);
        errores.agregar(err);
    }

    protected int error_sync_size() {
        return 1;
    }

    public Cola<String> getErrores(){
        return errores;
    }

:}

terminal    USER,ESTU,CATE,EDIF,SALON,CURSO,HORARIO,ASIG,TIPO_USER,ALFANUMERICO,
            CARNET,STRING,STRING_SPACE,P_A,P_C,COMA,DOT_COMA,NUMERO,CADENA_DIA,CADENA_HORARIO;

non terminal exp,nums,cadenas;

start with exp;

exp ::= exp USER:obj P_A nums:identificador COMA STRING:nombre COMA STRING:pass COMA TIPO_USER:tipoUser P_C DOT_COMA
        {:
            try{
                int id = Integer.valueOf(((token)identificador).getLexeme());
                Usuario newUser = new Usuario(id, ((token)nombre).getLexeme(), ((token)pass).getLexeme(), ((token)tipoUser).getLexeme());
                if(datos.getUsuarios().buscar(newUser)==null)
                {
                    try {
                    switch (newUser.getTipo()) {
                        case "colaborador":
                            datos.getUsuarios().add(newUser, newUser.getNombre());
                            break;
                        case "estudiante":
                            Estudiante tmpEstudiante = new Estudiante(newUser.getId(), "", "");
                            if(datos.getEstudiantes().buscar(tmpEstudiante, tmpEstudiante.hashCode())!=null){
                                datos.getUsuarios().add(newUser, newUser.getNombre());
                            }else{
                                errores.agregar("No existe refencia del estudiante, Linea: "+((token)identificador).getLine()+" Columna: "+((token)identificador).getColumn());  
                            }
                            break;
                        case "super":
                            errores.agregar("No pude cargar un usuario super en el sistema, Linea: "+((token)tipoUser).getLine()+" Columna: "+((token)tipoUser).getColumn());
                            break;
                        default:
                            errores.agregar("Tipo de usuario no reconocido, Linea: "+((token)tipoUser).getLine()+" Columna: "+((token)tipoUser).getColumn());
                    }
                    } catch (CloneNodeException e) {
                        errores.agregar("Ya existe un usuario \""+newUser.getNombre()+"\" en el sistema, Linea: "+((token)nombre).getLine()+" Columna: "+((token)nombre).getColumn());
                    }
                }else{
                    errores.agregar("Ya existe un usuario con id \""+newUser.getId()+"\" en el sistema, Linea: "+((token)identificador).getLine()+" Columna: "+((token)identificador).getColumn());
                }
                System.out.println("--------Usuario-------");
                System.out.println(newUser.toString());
                System.out.println("----------------------");
            }catch(Exception ex){
                errores.agregar("No se puede recuperar el id, Linea: "+((token)obj).getLine());
            }
        :}
    |   exp ESTU:obj P_A CARNET:carnet COMA cadenas:nombre COMA cadenas:direccion P_C DOT_COMA
        {:
            try{
                int idCarnet =  Integer.valueOf(((token)carnet).getLexeme());
                Estudiante newEstudiante = new Estudiante(idCarnet, ((token)nombre).getLexeme(), ((token)direccion).getLexeme());
                try {
                    datos.getEstudiantes().add(newEstudiante,newEstudiante.hashCode());
                } catch (CloneNodeException ex) {
                    errores.agregar("Ya existe un estudiante con carnet \""+newEstudiante.getCarnet()+"\" en el sistema, Linea: "+((token)carnet).getLine()+",Columna:"+((token)carnet).getColumn());
                }
                System.out.println("------Estudiante------");
                System.out.println(newEstudiante.toString());
                System.out.println("----------------------");
            }catch(Exception ex){
                errores.agregar("No se puede recuperar el carnet, Linea: "+((token)obj).getLine());
            }
        :}
    |   exp EDIF P_A STRING:nombre P_C DOT_COMA
        {:
            Edificio newEdificio = new Edificio(((token)nombre).getLexeme());
            try {
                datos.getEdificios().add(newEdificio, newEdificio.getNombre());
                System.out.println("-------Edificio-------");
                System.out.println(newEdificio.toString());
                System.out.println("----------------------");
            } catch (CloneNodeException ex) {
                errores.agregar("Ya existe un edificio:" + newEdificio.getNombre());
            }
        :}
    |   exp CURSO:obj P_A nums:codigo COMA cadenas:nombre COMA nums:semestre COMA nums:creditos P_C DOT_COMA
        {:
            if(semestre != null){
                int numSemestre = Integer.valueOf(((token)semestre).getLexeme());
                if(numSemestre>0&&numSemestre<=10){
                    if(nombre!=null){
                        if(creditos!=null){
                            Curso newCurso = new Curso(Integer.valueOf(((token)codigo).getLexeme()), ((token)nombre).getLexeme(), numSemestre, Integer.valueOf(((token)creditos).getLexeme()));
                            try {
                                datos.getCursos().addOrden(newCurso, String.valueOf(newCurso.getCodigo()));

                                System.out.println("---------Curso--------");
                                System.out.println(newCurso.toString());
                                System.out.println("----------------------");

                            } catch (CloneNodeException ex) {
                                errores.agregar("Ya existe un curso con codigo \""+newCurso.getCodigo()+"\" ,Linea: "+((token)codigo).getLine()+" Columna: "+((token)codigo).getColumn());
                            }
                        }else{
                            errores.agregar("No se puede recuperar la cantidad de creditos del curso, Linea: "+((token)obj).getLine());    
                        }
                    }else{
                        errores.agregar("No se puede recuperar el nombre del curso, Linea: "+((token)obj).getLine());        
                    }
                }else{
                errores.agregar("Error Semantico: el numero asociado al semestre debe ser entre el rango [1 - 10], Linea: "+((token)semestre).getLine()+",Columna: "+((token)semestre).getColumn());
                }
            }else{
                errores.agregar("No se puede recuperar el semestre del curso, Linea: "+((token)obj).getLine());
            }
        :}
    |   exp CATE:obj P_A nums:identificador COMA cadenas:nombre COMA cadenas:direccion P_C DOT_COMA
        {:
            if(identificador!=null){
                int id = Integer.valueOf(((token)identificador).getLexeme());
                if(nombre!=null){
                    if(direccion!=null){
                        Catedratico newCatedratico = new Catedratico(id, ((token)nombre).getLexeme(),((token)direccion).getLexeme());
                        try {
                            datos.getCatedraticos().agregar(((token)identificador).getLexeme(), newCatedratico);
                            System.out.println("-----Catedratico------");
                            System.out.println(newCatedratico.toString());
                            System.out.println("----------------------");
                        } catch (CloneNodeException ex) {
                            errores.agregar("Ya existe un Catedratico con identificador: "+((token)identificador).getLexeme()+", Linea: "+((token)identificador).getLine()+",Columna: "+((token)identificador).getColumn());
                        }catch(NullTagException ex){
                            errores.agregar("No se esta asignando un identificador al Catedratico, Linea: "+((token)identificador).getLine()+",Columna: "+((token)identificador).getColumn());
                        }
                    }else{
                        errores.agregar("No se puede recuperar la direccion del catedratico, Linea: "+((token)obj).getLine());
                    }
                }else{
                    errores.agregar("No se puede recuperar el nombre del catedratico, Linea: "+((token)obj).getLine());
                }
            }else{
                errores.agregar("No se puede recuperar el identificador del catedratico, Linea: "+((token)obj).getLine());
            }
        :}
    |   exp SALON:obj P_A STRING:edificio COMA nums:numero COMA nums:capacidad P_C DOT_COMA
        {:
            if(numero!=null){
                int numeroSalon = Integer.valueOf(((token)numero).getLexeme()); 
                if(capacidad!=null){
                    int cantidadEstudiantes = Integer.valueOf(((token)capacidad).getLexeme());
                    String edi = ((token)edificio).getLexeme();
                    try {
                        Edificio recuEdificio =  datos.getEdificios().buscar(edi);
                        if(recuEdificio!=null){
                            Salon newSalon = new Salon(numeroSalon, cantidadEstudiantes, edi);
                            recuEdificio.getSalones().agregarOrden(newSalon,String.valueOf(newSalon.getNumeroSalon()));

                            System.out.println("---------Salon--------");
                            System.out.println(newSalon.toString());
                            System.out.println("----------------------");

                        }else{
                            errores.agregar("No existe un edificio \""+edi+"\", Linea: "+((token)edificio).getLine()+" ,Columna: "+((token)edificio).getColumn());
                        }
                    } catch (CloneNodeException ex) {
                        errores.agregar("Ya existe un salon \""+numeroSalon+"\" en el edificio \""+edi+"\", Linea: "+((token)numero).getLine()+" ,Columna: "+((token)numero).getColumn());
                    }catch(InvalidStructureException ex){
                        errores.agregar("Error al guardar el salon: "+numeroSalon);
                    }
                }else{
                    errores.agregar("No se puede recuperar la capacidad del salon , Linea: "+((token)obj).getLine());
                }
            }else{
                errores.agregar("No se puede recuperar el numero de salon , Linea: "+((token)obj).getLine());
            }

        :}
    |   exp HORARIO:obj P_A nums:code COMA CADENA_HORARIO:horario COMA CADENA_DIA:dia COMA nums:curso COMA nums:salon COMA ALFANUMERICO:edificio COMA nums:catedratico P_C DOT_COMA
        {:
            if(code!=null){
                int codigo = Integer.valueOf(((token)code).getLexeme());
                String hour = ((token)horario).getLexeme();
                String day = ((token)dia).getLexeme();
                if(curso!=null){
                    int codeCurso = Integer.valueOf(((token)curso).getLexeme());
                    if(salon!=null){
                        int numSalon = Integer.valueOf(((token)salon).getLexeme());
                        String edi = ((token)edificio).getLexeme();
                        if(catedratico!=null){
                            int idCatedratico = Integer.valueOf(((token)catedratico).getLexeme());
                            Horario newHorario = new Horario(codigo, hour, day, codeCurso, numSalon, edi, idCatedratico);
                            try {
                                Edificio tmpEdificio = datos.getEdificios().buscar(edi);
                                if(tmpEdificio!=null){
                                    Curso tmpCurso = datos.getCursos().buscar(String.valueOf(codeCurso));
                                    
                                    if(tmpCurso!=null){
                                        Salon tmpSalon = tmpEdificio.getSalones().buscar(String.valueOf(numSalon));
                                        if(tmpSalon!=null){
                                            Catedratico tmpCatedratico = datos.getCatedraticos().buscar(String.valueOf(idCatedratico));
                                            if(tmpCatedratico!=null){
                                                datos.getHorarios().agregar(String.valueOf(newHorario.getCodigo()), newHorario);
                                                System.out.println("--------Horario-------");
                                                System.out.println(newHorario.toString());
                                                System.out.println("----------------------");
                                            }else{
                                                errores.agregar("No existe el catedratico \""+idCatedratico+"\" en el sistema, Linea: "+(((token)catedratico).getLine())+",Columna: "+(((token)catedratico).getColumn()));
                                            }
                                        }else{
                                            errores.agregar("No existe un salon \""+numSalon+"\" en el edificio \""+edi+"\", Linea: "+(((token)salon).getLine())+",Columna: "+(((token)salon).getColumn()));
                                        }
                                    }else{
                                        errores.agregar("No existe un curso con codigo \""+codeCurso+"\" en el sistema, Linea: "+(((token)curso).getLine())+",Columna: "+(((token)curso).getColumn()));
                                    }
                                }else{
                                    errores.agregar("No existe un edificio \""+edi+"\" en el sistema, Linea: "+(((token)edificio).getLine())+",Columna: "+(((token)edificio).getColumn()));
                                }
                            } catch (CloneNodeException ex) {
                                errores.agregar("Ya existe un horario con el tag \""+codigo+"\" en el sistema, Linea: "+(((token)code).getLine())+",Columna: "+(((token)code).getColumn()));
                            } catch(NullTagException ex){
                                errores.agregar("Debe de agregar un codigo de identificacion para el horario");
                            }
                        }else{
                            errores.agregar("No se puede recuperar el identificador del catedratico en el horario, Linea: "+((token)obj).getLine());
                        }
                    }else{
                        errores.agregar("No se puede recuperar el numero de salon del horario , Linea: "+((token)obj).getLine());
                    }
                }else{
                    errores.agregar("No se puede recuperar el codigo del curso del horario , Linea: "+((token)obj).getLine());
                }
            }else{
                errores.agregar("No se puede recuperar el codigo de identificacion del horario , Linea: "+((token)obj).getLine());
            }

        :}
    |   exp ASIG:obj P_A CARNET:_carnet COMA nums:_horario COMA nums:_zona COMA nums:_final P_C DOT_COMA
        {:
            int carnet = Integer.valueOf(((token)_carnet).getLexeme());
            if(_horario!=null){
                int horario = Integer.valueOf(((token)_horario).getLexeme());
                if(_zona!=null){
                    int zona = Integer.valueOf(((token)_zona).getLexeme()); 
                    if(_final!=null){
                        int final_ = Integer.valueOf(((token)_final).getLexeme());
                        Asignacion newAsignacion = new Asignacion(carnet, horario, zona, final_);
                        Estudiante tmpEstudiante = new Estudiante(carnet, "", "");
                        tmpEstudiante = datos.getEstudiantes().buscar(tmpEstudiante,tmpEstudiante.hashCode());
                        if(tmpEstudiante!=null){
                            Horario tmpHorario = datos.getHorarios().buscar(String.valueOf(horario));
                            if(tmpHorario!=null){
                                int calculo = zona +final_;
                                if(calculo <=100){
                                    Edificio tmpEdificio = datos.getEdificios().buscar(tmpHorario.getEdificio());
                                    Salon tmpSalon = tmpEdificio.getSalones().buscar(String.valueOf(tmpHorario.getSalon()));
                                    int capacidad = tmpSalon.getCantidadEstudiantes();
                                    int asignados = tmpHorario.getAsignaciones().getLegth();
                                    if(asignados < capacidad){
                                        try {
                                            tmpHorario.getAsignaciones().addOrden(newAsignacion, String.valueOf(newAsignacion.getCarnet()));
                                            tmpEstudiante.getHorarios().agregar(String.valueOf(tmpHorario.getCodigo()),tmpHorario);
                                            System.out.println("------Asignacion------");
                                            System.out.println(newAsignacion.toString());
                                            System.out.println("----------------------");   
                                        } catch (CloneNodeException ex ){
                                            errores.agregar("El estudiante \""+carnet+"\" ya esta asignado al curso, Linea: "+(((token)_carnet).getLine())+",Columna: "+(((token)_carnet).getColumn()));
                                        }
                                        catch(NullTagException e) {
                                            errores.agregar("Error al guardar la asignacion");
                                        }
                                    }else{
                                        errores.agregar("Ya no se admiten asignaciones en el horario \""+tmpHorario.getCodigo()+"\" capacidad superada, Linea: "+(((token)_horario).getLine())+",Columna: "+(((token)_horario).getColumn()));
                                    }
                                }else{
                                    errores.agregar("La zona y final debe ser menor o igual a 1000, Linea: "+(((token)_zona).getLine())+",Columna: "+(((token)_zona).getColumn()));
                                    errores.agregar("La zona y final debe ser menor o igual a 1000, Linea: "+(((token)_final).getLine())+",Columna: "+(((token)_final).getColumn()));
                                }
                            }else{
                                errores.agregar("No existe un horario con id \""+horario+"\" en el sistema, Linea: "+(((token)_horario).getLine())+",Columna: "+(((token)_horario).getColumn()));
                            }
                        }else{
                            errores.agregar("No existe un estudiante con carnet \""+carnet+"\" en el sistema, Linea: "+(((token)_carnet).getLine())+",Columna: "+(((token)_carnet).getColumn()));
                        }
                    }else{
                        errores.agregar("No se puede recuperar la nota de final, Linea: "+((token)obj).getLine());
                    }
                }else{
                    errores.agregar("No se puede recuperar la nota de zona, Linea: "+((token)obj).getLine());
                }
            }else{
                errores.agregar("No se puede recuperar el codigo del horario, Linea: "+((token)obj).getLine());
            }
        :}
    |
    |   error
    ;

cadenas ::= STRING:e1 {:RESULT = e1;:}
        |   STRING_SPACE:e1 {:RESULT = e1;:}
        | error
        ;

nums    ::= NUMERO:e1 {:RESULT =e1;:}
        |   CARNET:e1 {:RESULT =e1;:}
        |   error
        ;