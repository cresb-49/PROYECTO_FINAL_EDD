/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sistema_asignacion.Fronted.UI.Reportes;

import com.mycompany.sistema_asignacion.Backen.EDD.PilaTag;
import com.mycompany.sistema_asignacion.Backen.Objetos.Curso;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Objetos.Edificio;
import com.mycompany.sistema_asignacion.Backen.Objetos.Horario;
import com.mycompany.sistema_asignacion.Backen.Objetos.Salon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjamin
 */
public class CursosEnSalon extends javax.swing.JInternalFrame {

    private DatosSistema datosSistema;

    /**
     * Creates new form CursosEnSalon
     */
    public CursosEnSalon(DatosSistema datosSistema) {
        this.datosSistema = datosSistema;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FieldNumSalon = new javax.swing.JFormattedTextField();
        FieldEdificio = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaCursos = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Cursos en Salon");

        jLabel1.setText("Edificio");

        jLabel2.setText("Numero de Salon:");

        FieldNumSalon.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TablaCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Codigo", "Semestre"
            }
        ));
        jScrollPane1.setViewportView(TablaCursos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(FieldEdificio, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FieldNumSalon, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jButton1)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FieldEdificio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FieldNumSalon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String edificio = FieldEdificio.getText();
        String numSalon = FieldNumSalon.getText();

        Edificio buscarEdificio = this.datosSistema.getEdificios().buscar(edificio);
        if (buscarEdificio != null) {
            Salon buscarSalon = buscarEdificio.getSalones().buscar(numSalon);
            if (buscarSalon != null) {
                System.out.println(buscarSalon.toString());
                System.out.println(buscarSalon.getEdificio());
                this.buscarCursos(buscarSalon);
            } else {
                JOptionPane.showMessageDialog(this, "No existe un salon \"" + numSalon + "\" en el edificio \"" + edificio + "\" ", "Error", JOptionPane.WARNING_MESSAGE);
                this.limpiarTabla();
            }
        } else {
            JOptionPane.showMessageDialog(this, "No existe un edificio \"" + edificio + "\" en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
            this.limpiarTabla();
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField FieldEdificio;
    private javax.swing.JFormattedTextField FieldNumSalon;
    private javax.swing.JTable TablaCursos;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void buscarCursos(Salon buscarSalon) {
        PilaTag<Curso> cursos = new PilaTag<>();
        Horario[] AVLtoArrayInOrden = datosSistema.getHorarios().AVLtoArrayInOrden(Horario[].class);
        for (Horario horario : AVLtoArrayInOrden) {
            if (horario.getEdificio().equals(buscarSalon.getEdificio())) {
                if (horario.getSalon() == buscarSalon.getNumeroSalon()) {
                    if (!cursos.buscar(String.valueOf(horario.getCodigoCurso()))) {
                        Curso buscarCurso = this.datosSistema.getCursos().buscar(String.valueOf(horario.getCodigoCurso()));
                        if (buscarCurso != null) {
                            cursos.push(buscarCurso, String.valueOf(buscarCurso.getCodigo()));
                        }
                    }
                }
            }
        }
        System.out.println("Imprecion de pila");
        cursos.imprimirPila();

        this.actualizarTabla(cursos);
    }

    private void actualizarTabla(PilaTag<Curso> cursos) {
        this.limpiarTabla();

        DefaultTableModel model = new DefaultTableModel();
        this.TablaCursos.setModel(model);

        String header[] = {"Nombre.", "Codigo", "Semestre"};
        for (String string : header) {
            model.addColumn(string);
        }

        Curso tmpCurso;
        while (!cursos.isEmpty()) {
            tmpCurso = cursos.pop();
            if (tmpCurso != null) {
                Object[] rowtab = {tmpCurso.getNombre(), tmpCurso.getCodigo(), tmpCurso.getSemestre()};
                model.addRow(rowtab);
            }
        }
    }

    private void limpiarTabla() {
        DefaultTableModel model = new DefaultTableModel();
        this.TablaCursos.setModel(model);
    }

}
