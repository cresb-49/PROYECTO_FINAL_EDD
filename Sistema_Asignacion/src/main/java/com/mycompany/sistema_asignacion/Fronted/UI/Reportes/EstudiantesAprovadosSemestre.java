/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sistema_asignacion.Fronted.UI.Reportes;

import com.mycompany.sistema_asignacion.Backen.EDD.Cola;
import com.mycompany.sistema_asignacion.Backen.EDD.Pila;
import com.mycompany.sistema_asignacion.Backen.EDD.PilaTag;
import com.mycompany.sistema_asignacion.Backen.Objetos.Asignacion;
import com.mycompany.sistema_asignacion.Backen.Objetos.Curso;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Objetos.Horario;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjamin
 */
public class EstudiantesAprovadosSemestre extends javax.swing.JInternalFrame {

    private DatosSistema datosSistema;

    /**
     * Creates new form EstudiantesAprovadosSemestre
     */
    public EstudiantesAprovadosSemestre(DatosSistema datosSistema) {
        this.datosSistema = datosSistema;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaInfo = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Estudiantes Aprobados Semestre");
        setToolTipText("");

        TablaInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Codigo", "Nombre", "Aprobados", "Reprobados"
            }
        ));
        jScrollPane1.setViewportView(TablaInfo);

        jLabel1.setText("Semestre");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));

        jButton1.setText("Buscar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int semestre = this.jComboBox1.getSelectedIndex() + 1;
        if(!this.datosSistema.getHorarios().isEmpty()){
            this.localizarSemestre(semestre);
        }
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable TablaInfo;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void limpiarTabla() {
        DefaultTableModel model = new DefaultTableModel();
        this.TablaInfo.setModel(model);
    }

    private void localizarSemestre(int semestre) {
        Horario[] horarios = datosSistema.getHorarios().AVLtoArrayInOrden(Horario[].class);
        PilaTag<Object[]> tuplas = new PilaTag<>();

        for (Horario horario : horarios) {
            Curso buscarCurso = datosSistema.getCursos().buscar(String.valueOf(horario.getCodigoCurso()));
            if (buscarCurso != null) {
                if (buscarCurso.getSemestre() == semestre) {
                    Object tmpTupla[] = tuplas.retornar(String.valueOf(buscarCurso.getCodigo()));
                    if (tmpTupla == null) {
                        Object tupla[] = {buscarCurso.getCodigo(), buscarCurso.getNombre(), 0, 0};
                        this.calcularAprovadosReprobados(tupla, horario);
                        tuplas.push(tupla, String.valueOf(buscarCurso.getCodigo()));
                    } else {
                        this.mergeAprovados(tmpTupla, horario);
                    }
                }
            }
        }
        this.actualizarTabla(tuplas);
    }

    private void calcularAprovadosReprobados(Object[] tupla, Horario horario) {
        int aprovados = 0;
        int reprobados = 0;
        int suma = 0;
        Asignacion[] asignaciones = horario.getAsignaciones().listToArray(Asignacion[].class);
        for (Asignacion asignacione : asignaciones) {
            suma = asignacione.getZona() + asignacione.getFinal_();
            if (suma < 61) {
                reprobados++;
            } else {
                aprovados++;
            }
        }
        tupla[2] = aprovados;
        tupla[3] = reprobados;
    }

    private void mergeAprovados(Object[] tupla, Horario horario) {
        int aprovados = 0;
        int reprobados = 0;
        int suma = 0;
        Asignacion[] asignaciones = horario.getAsignaciones().listToArray(Asignacion[].class);
        for (Asignacion asignacione : asignaciones) {
            suma = asignacione.getZona() + asignacione.getFinal_();
            if (suma < 61) {
                reprobados++;
            } else {
                aprovados++;
            }
        }
        tupla[2] = (Integer) tupla[2] + aprovados;
        tupla[3] = (Integer) tupla[3] + reprobados;
    }

    private void actualizarTabla(PilaTag<Object[]> tuplas) {
        this.limpiarTabla();
        DefaultTableModel model = new DefaultTableModel();
        this.TablaInfo.setModel(model);

        String header[] = {"Codigo", "Nombre", "Aprobados", "Reprobados"};
        for (String string : header) {
            model.addColumn(string);
        }

        Object tmpTupla[];
        while (!tuplas.isEmpty()) {
            tmpTupla = tuplas.pop();
            if (tmpTupla != null) {
                model.addRow(tmpTupla);
            }
        }
    }
}
