/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sistema_asignacion.Fronted.UI.Asignaciones;

import com.mycompany.sistema_asignacion.Backen.Exceptions.CloneNodeException;
import com.mycompany.sistema_asignacion.Backen.Exceptions.NullTagException;
import com.mycompany.sistema_asignacion.Backen.Objetos.Asignacion;
import com.mycompany.sistema_asignacion.Backen.Objetos.Curso;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Objetos.Edificio;
import com.mycompany.sistema_asignacion.Backen.Objetos.Estudiante;
import com.mycompany.sistema_asignacion.Backen.Objetos.Horario;
import com.mycompany.sistema_asignacion.Backen.Objetos.Salon;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author benjamin
 */
public class NuevaAsignacion extends javax.swing.JInternalFrame {

    private DatosSistema datosSistema;

    /**
     * Creates new form NuevaAsignacion
     *
     * @param datosSistema
     */
    public NuevaAsignacion(DatosSistema datosSistema) {
        this.datosSistema = datosSistema;
        initComponents();
        this.cargarHorarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        FieldCarnet = new javax.swing.JFormattedTextField();
        ButtonBuscar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaHorarios = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        FieldId = new javax.swing.JTextField();
        ButtonAsignar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        FieldEstudiante = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        FieldZona = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        FieldFinal = new javax.swing.JFormattedTextField();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Asignacion de Curso");

        jLabel1.setText("Buscar Estudiante:");

        FieldCarnet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#########"))));

        ButtonBuscar.setText("Buscar");
        ButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBuscarActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        TablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Horario", "DIa", "Curso", "Semestre", "Asignados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaHorarios.setEnabled(false);
        TablaHorarios.getTableHeader().setReorderingAllowed(false);
        TablaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaHorariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaHorarios);

        jLabel2.setText("Horario Seleccionado");

        FieldId.setEditable(false);

        ButtonAsignar.setText("Realizar Asignacion");
        ButtonAsignar.setEnabled(false);
        ButtonAsignar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAsignarActionPerformed(evt);
            }
        });

        jLabel3.setText("Estudiante:");

        FieldEstudiante.setEditable(false);

        jLabel4.setText("Zona:");

        FieldZona.setEditable(false);
        FieldZona.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        jLabel5.setText("Final:");

        FieldFinal.setEditable(false);
        FieldFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(FieldZona, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                            .addComponent(FieldEstudiante, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FieldId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FieldFinal))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ButtonAsignar)
                        .addGap(94, 94, 94))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(FieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(FieldEstudiante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(FieldZona, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(FieldFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(ButtonAsignar)
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(FieldCarnet, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonBuscar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FieldCarnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaHorariosMouseClicked
        // TODO add your handling code here:
        int row = this.TablaHorarios.rowAtPoint(evt.getPoint());
        FieldId.setText(String.valueOf(this.TablaHorarios.getValueAt(row, 0)));
    }//GEN-LAST:event_TablaHorariosMouseClicked

    private void ButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBuscarActionPerformed
        // TODO add your handling code here:
        String carntet = FieldCarnet.getText();
        if (!carntet.isEmpty()) {
            int carnet = Integer.valueOf(carntet);
            Estudiante estudiante = this.datosSistema.getEstudiantes().buscar(new Estudiante(carnet, "", ""), carnet);
            if (estudiante == null) {
                JOptionPane.showMessageDialog(this, "No existe un registro de un estudiante \"" + carntet + "\" en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
                this.TablaHorarios.setEnabled(false);
                this.FieldEstudiante.setText(null);
                this.FieldFinal.setEditable(false);
                this.FieldFinal.setText(null);
                this.FieldZona.setEditable(false);
                this.FieldZona.setText(null);
                this.ButtonAsignar.setEnabled(false);
            } else {
                this.TablaHorarios.setEnabled(true);
                this.FieldEstudiante.setText(String.valueOf(estudiante.getCarnet()));
                this.TablaHorarios.setEnabled(true);
                this.FieldFinal.setEditable(true);
                this.FieldZona.setEditable(true);
                this.ButtonAsignar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_ButtonBuscarActionPerformed

    private void ButtonAsignarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAsignarActionPerformed
        // TODO add your handling code here:
        String h = FieldId.getText();
        String estu = FieldEstudiante.getText();

        String z = FieldZona.getText();
        String f = FieldFinal.getText();

        Horario horario = this.datosSistema.getHorarios().buscar(h);
        if (horario == null) {
            JOptionPane.showMessageDialog(this, "No selecciono un horario", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            Estudiante estudiante = this.datosSistema.getEstudiantes().buscar(new Estudiante(Integer.valueOf(estu), "", ""), Integer.valueOf(estu));
            if (estudiante == null) {
                JOptionPane.showMessageDialog(this, "Ya no existe el estudiante en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
            } else {
                int zona = 0;
                try {
                    zona = Integer.valueOf(z);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ingreso un valor en zona no valido se corregira a 0", "Error", JOptionPane.WARNING_MESSAGE);
                    this.FieldZona.setText("0");
                }
                int fin = 0;
                try {
                    fin = Integer.valueOf(f);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Ingreso un valor en final no valido se corregira a 0", "Error", JOptionPane.WARNING_MESSAGE);
                    this.FieldFinal.setText("0");
                }
                if ((zona + fin) > 100) {
                    JOptionPane.showMessageDialog(this, "La zona y el final superan 100 corrija e intente de nuevo", "Error", JOptionPane.WARNING_MESSAGE);
                } else {
                    Edificio tmpEdificio = this.datosSistema.getEdificios().buscar(horario.getEdificio());
                    Salon tmpSalon = tmpEdificio.getSalones().buscar(String.valueOf(horario.getSalon()));
                    int capacidad = tmpSalon.getCantidadEstudiantes();
                    int asignados = horario.getAsignaciones().getLegth();
                    if (asignados < capacidad) {
                        try {
                            Asignacion newAsignacion = new Asignacion(Integer.valueOf(estu), Integer.valueOf(h), zona, fin);
                            horario.getAsignaciones().addOrden(newAsignacion, String.valueOf(newAsignacion.getCarnet()));
                            estudiante.getHorarios().agregar(String.valueOf(horario.getCodigo()), horario);
                            JOptionPane.showMessageDialog(this, "El estudiante \"" + estu + "\" se asigando correctamente", "Finalizado", JOptionPane.INFORMATION_MESSAGE);
                            this.reiniciarElementos();
                            this.cargarHorarios();
                        } catch (CloneNodeException ex) {
                            JOptionPane.showMessageDialog(this, "El estudiante \"" + estu + "\" ya esta asignado al curso", "Error", JOptionPane.WARNING_MESSAGE);
                        } catch (NullTagException ex) {
                            JOptionPane.showMessageDialog(this, "Error al guardar la asignacion", "Error", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Ya no se admiten asignaciones en el horario \"" + horario.getCodigo() + "\" capacidad superada", "Error", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_ButtonAsignarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAsignar;
    private javax.swing.JButton ButtonBuscar;
    private javax.swing.JFormattedTextField FieldCarnet;
    private javax.swing.JTextField FieldEstudiante;
    private javax.swing.JFormattedTextField FieldFinal;
    private javax.swing.JTextField FieldId;
    private javax.swing.JFormattedTextField FieldZona;
    private javax.swing.JTable TablaHorarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void cargarHorarios() {
        if (this.datosSistema.getHorarios().isEmpty()) {
            this.ButtonBuscar.setEnabled(false);
            JOptionPane.showMessageDialog(this, "No existen horarios al cual asignarse", "No hay horarios", JOptionPane.WARNING_MESSAGE);
        } else {
            Horario[] horarios = this.datosSistema.getHorarios().AVLtoArrayInOrden(Horario[].class);

            DefaultTableModel model = (DefaultTableModel) this.TablaHorarios.getModel();

            if (model.getRowCount() > 0) {
                do {
                    model.removeRow(0);
                } while (this.TablaHorarios.getRowCount() != 0);
            }

            /**
             * String header[] = {"ID", "Horario", "Dia", "Curso", "Semestre",
             * "Asignados"}; for (String string : header) {
             * model.addColumn(string); }
             */
            for (Horario horario : horarios) {
                Curso curso = this.datosSistema.getCursos().buscar(String.valueOf(horario.getCodigoCurso()));
                if (curso != null) {
                    Object row[] = {horario.getCodigo(), horario.getHora(), horario.getDia(), curso.getNombre(), curso.getSemestre(), horario.getAsignaciones().getLegth()};
                    model.addRow(row);
                }
            }
        }
    }
    private void reiniciarElementos(){
        this.FieldId.setText(null);
        this.FieldEstudiante.setText(null);
        this.FieldZona.setText(null);
        this.FieldZona.setEditable(false);
        this.FieldFinal.setText(null);
        this.FieldFinal.setEditable(false);
        
        this.ButtonAsignar.setEnabled(false);
    }
}
