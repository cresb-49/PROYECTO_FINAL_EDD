/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sistema_asignacion.Fronted.UI.Reportes;

import com.mycompany.sistema_asignacion.Backen.Objetos.Curso;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Objetos.Estudiante;
import com.mycompany.sistema_asignacion.Backen.Objetos.Horario;
import com.mycompany.sistema_asignacion.Backen.Objetos.Usuario;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Benjamin
 */
public class CursosAsignados extends javax.swing.JInternalFrame {

    private DatosSistema datosSistema;
    private Usuario currentUser;

    /**
     * Creates new form CursosAsignados
     *
     * @param currentUser
     * @param datosSistema
     */
    public CursosAsignados(Usuario currentUser, DatosSistema datosSistema) {
        this.datosSistema = datosSistema;
        this.currentUser = currentUser;
        initComponents();

        this.tipoUsuario(this.currentUser);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        FieldCarnet = new javax.swing.JFormattedTextField();
        ButtonBuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaAsignaciones = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        setTitle("Asignaciones De Estudiante");

        jLabel1.setText("Carnet del Estudiante:");

        FieldCarnet.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#########"))));

        ButtonBuscar.setText("Buscar");
        ButtonBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonBuscarActionPerformed(evt);
            }
        });

        TablaAsignaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Codigo"
            }
        ));
        jScrollPane1.setViewportView(TablaAsignaciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(FieldCarnet, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ButtonBuscar)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FieldCarnet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonBuscar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonBuscarActionPerformed
        // TODO add your handling code here:
        if (!FieldCarnet.getText().isEmpty()) {
            int carnet = Integer.valueOf(FieldCarnet.getText());
            Estudiante tmpEstudiante = new Estudiante(carnet, "", "");
            tmpEstudiante = datosSistema.getEstudiantes().buscar(tmpEstudiante, tmpEstudiante.hashCode());
            if (tmpEstudiante != null) {
                this.limpiarTabla();
                this.actualizarDatosTabla(tmpEstudiante);
            } else {
                JOptionPane.showMessageDialog(this, "No existe un estudiante con carnet \"" + carnet + "\"", "Error", JOptionPane.WARNING_MESSAGE);
                this.limpiarTabla();
            }
        }
    }//GEN-LAST:event_ButtonBuscarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonBuscar;
    private javax.swing.JFormattedTextField FieldCarnet;
    private javax.swing.JTable TablaAsignaciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void tipoUsuario(Usuario currentUser) {
        if (currentUser.getTipo().equals("estudiante")) {
            this.FieldCarnet.setText(String.valueOf(currentUser.getId()));
            this.FieldCarnet.setEnabled(false);
            this.ButtonBuscar.setEnabled(false);
            Estudiante estudiante = datosSistema.getEstudiantes().buscar(new Estudiante(currentUser.getId(), "", ""), currentUser.getId());
            this.actualizarDatosTabla(estudiante);
        }
    }

    private void actualizarDatosTabla(Estudiante estudiante) {
        Horario[] horarios = estudiante.getHorarios().AVLtoArrayInOrden(Horario[].class);
        Curso tmpCurso;
        DefaultTableModel model = new DefaultTableModel();
        this.TablaAsignaciones.setModel(model);

        String header[] = {"Nombre", "Codigo","Semestre"};
        for (String string : header) {
            model.addColumn(string);
        }
        
        for (Horario horario : horarios) {
            tmpCurso = this.datosSistema.getCursos().buscar(String.valueOf(horario.getCodigoCurso()));
            Object[] rowtab = {tmpCurso.getNombre(),tmpCurso.getCodigo(),tmpCurso.getSemestre()};
            model.addRow(rowtab);
        }

    }
    
    private void limpiarTabla(){
        DefaultTableModel model = new DefaultTableModel();
        this.TablaAsignaciones.setModel(model);
    }
}
