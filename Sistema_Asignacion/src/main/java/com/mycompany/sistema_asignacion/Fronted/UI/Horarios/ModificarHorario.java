/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.sistema_asignacion.Fronted.UI.Horarios;

import com.mycompany.sistema_asignacion.Backen.Exceptions.CloneNodeException;
import com.mycompany.sistema_asignacion.Backen.Exceptions.NullTagException;
import com.mycompany.sistema_asignacion.Backen.Objetos.Catedratico;
import com.mycompany.sistema_asignacion.Backen.Objetos.Curso;
import com.mycompany.sistema_asignacion.Backen.Objetos.DatosSistema;
import com.mycompany.sistema_asignacion.Backen.Objetos.Edificio;
import com.mycompany.sistema_asignacion.Backen.Objetos.Horario;
import com.mycompany.sistema_asignacion.Backen.Objetos.Salon;
import java.awt.HeadlessException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author benjamin
 */
public class ModificarHorario extends javax.swing.JInternalFrame {

    private DatosSistema datosSistema;

    /**
     * Creates new form ModificarHorario
     */
    public ModificarHorario(DatosSistema datosSistema) {
        this.datosSistema = datosSistema;
        initComponents();
        this.llenarTablasDeSeleccion();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaHorarios = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        FieldCodigoHorario = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        FieldHora1 = new javax.swing.JFormattedTextField();
        ComboHora1 = new javax.swing.JComboBox<>();
        FieldHora2 = new javax.swing.JFormattedTextField();
        ComboHora2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        ComboDia = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        FieldEdificio = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        FieldNumeroSalon = new javax.swing.JFormattedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaCursos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        FieldCurso = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TablaCatedratico = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        FieldCatedratico = new javax.swing.JTextField();
        ButtonModificar = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Modificar Horario");

        TablaHorarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Hora", "Dia", "Curso", "Edificio", "Salon", "Catedratico", "Asignados"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaHorarios.getTableHeader().setReorderingAllowed(false);
        TablaHorarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaHorariosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaHorarios);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Codigo de Horario");

        FieldCodigoHorario.setEditable(false);
        FieldCodigoHorario.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        FieldCodigoHorario.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setText("Hora:");

        FieldHora1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm"))));

        ComboHora1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "am", "pm" }));

        FieldHora2.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("hh:mm"))));

        ComboHora2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "am", "pm" }));

        jLabel3.setText("Dia");

        ComboDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "lunes", "martes", "miercoles", "jueves", "viernes" }));

        jLabel4.setText("Edificio");

        FieldEdificio.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setText("Salon");

        FieldNumeroSalon.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        FieldNumeroSalon.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        TablaCursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaCursos.getTableHeader().setReorderingAllowed(false);
        TablaCursos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaCursosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaCursos);

        jLabel7.setText("Curso");

        FieldCurso.setEditable(false);
        FieldCurso.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel8.setText("Catedraticos (Seleccione Uno)");

        TablaCatedratico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaCatedratico.getTableHeader().setReorderingAllowed(false);
        TablaCatedratico.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaCatedraticoMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(TablaCatedratico);

        jLabel6.setText("Catedratico");

        FieldCatedratico.setEditable(false);
        FieldCatedratico.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        ButtonModificar.setText("Modificar Horario");
        ButtonModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonModificarActionPerformed(evt);
            }
        });

        jLabel10.setText("Cursos (Seleccione Uno)");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FieldHora1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ComboHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(FieldHora2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ComboHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(FieldCodigoHorario)
                            .addComponent(ComboDia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(FieldEdificio)
                            .addComponent(FieldNumeroSalon)))
                    .addComponent(jLabel8)
                    .addComponent(jLabel7)
                    .addComponent(ButtonModificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FieldCatedratico, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(FieldCurso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(39, 39, 39))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(FieldCodigoHorario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FieldHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FieldHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ComboHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ComboDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(FieldEdificio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(FieldNumeroSalon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(FieldCurso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(FieldCatedratico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ButtonModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TablaHorariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaHorariosMouseClicked
        // TODO add your handling code here:
        int row = this.TablaHorarios.rowAtPoint(evt.getPoint());
        String idHorario = String.valueOf(this.TablaHorarios.getValueAt(row, 0));
        this.llenarCampos(idHorario);
    }//GEN-LAST:event_TablaHorariosMouseClicked

    private void TablaCursosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaCursosMouseClicked
        // TODO add your handling code here:
        int row = this.TablaCursos.rowAtPoint(evt.getPoint());
        FieldCurso.setText(String.valueOf(this.TablaCursos.getValueAt(row, 0)));
    }//GEN-LAST:event_TablaCursosMouseClicked

    private void TablaCatedraticoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaCatedraticoMouseClicked
        int row = this.TablaCatedratico.rowAtPoint(evt.getPoint());
        FieldCatedratico.setText(String.valueOf(this.TablaCatedratico.getValueAt(row, 0)));
    }//GEN-LAST:event_TablaCatedraticoMouseClicked

    private void ButtonModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonModificarActionPerformed
        // TODO add your handling code here:
        try {
            int codigo = Integer.valueOf(FieldCodigoHorario.getText());
            String hora = this.recuperarHora();
            if (!hora.isEmpty()) {
                String dia = ComboDia.getItemAt(ComboDia.getSelectedIndex());
                Curso curso = this.datosSistema.getCursos().buscar(FieldCurso.getText());
                if (curso != null) {
                    Edificio edificio = this.datosSistema.getEdificios().buscar(FieldEdificio.getText());
                    if (edificio != null) {
                        Salon salon = edificio.getSalones().buscar(FieldNumeroSalon.getText());
                        if (salon != null) {
                            Catedratico catedratico = this.datosSistema.getCatedraticos().buscar(FieldCatedratico.getText());
                            if (catedratico != null) {
                                Horario newHorario = new Horario(codigo, hora, dia, curso.getCodigo(), salon.getNumeroSalon(), edificio.getNombre(), catedratico.getId());
                                Horario horario = this.datosSistema.getHorarios().buscar(String.valueOf(newHorario.getCodigo()));
                                if (horario != null) {
                                    horario.setCodigoCurso(newHorario.getCodigoCurso());
                                    horario.setHora(newHorario.getHora());
                                    horario.setDia(newHorario.getDia());
                                    horario.setEdificio(newHorario.getEdificio());
                                    horario.setSalon(newHorario.getSalon());
                                    horario.setCodeCatedratico(newHorario.getCodeCatedratico());
                                    JOptionPane.showMessageDialog(this, "Se ha modificado el horario con exito", "Completado", JOptionPane.INFORMATION_MESSAGE);
                                    this.llenarTablaHorarios();
                                } else {
                                    JOptionPane.showMessageDialog(this, "No existe el horario que desea modificar", "Error", JOptionPane.WARNING_MESSAGE);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "No ha seleccionado un Catedratico para el curso", "Error", JOptionPane.WARNING_MESSAGE);
                            }

                        } else {
                            JOptionPane.showMessageDialog(this, "No ha seleccionado un salon correcto", "Error", JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "No ha seleccionado un edificio", "Error", JOptionPane.WARNING_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(this, "No ha seleccionado un curso", "Error", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "La hora no tiene formato valido", "Error", JOptionPane.WARNING_MESSAGE);
            }

        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El codigo asigano al horario no es valido deben ser caracteres numericos", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_ButtonModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonModificar;
    private javax.swing.JComboBox<String> ComboDia;
    private javax.swing.JComboBox<String> ComboHora1;
    private javax.swing.JComboBox<String> ComboHora2;
    private javax.swing.JTextField FieldCatedratico;
    private javax.swing.JFormattedTextField FieldCodigoHorario;
    private javax.swing.JTextField FieldCurso;
    private javax.swing.JTextField FieldEdificio;
    private javax.swing.JFormattedTextField FieldHora1;
    private javax.swing.JFormattedTextField FieldHora2;
    private javax.swing.JFormattedTextField FieldNumeroSalon;
    private javax.swing.JTable TablaCatedratico;
    private javax.swing.JTable TablaCursos;
    private javax.swing.JTable TablaHorarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void llenarCampos(String idHorario) {
        Horario horario = this.datosSistema.getHorarios().buscar(idHorario);
        if (horario != null) {
            ButtonModificar.setEnabled(true);
            FieldCodigoHorario.setText(String.valueOf(horario.getCodigo()));
            FieldEdificio.setText(horario.getEdificio());
            FieldNumeroSalon.setText(String.valueOf(horario.getSalon()));
            FieldCurso.setText(String.valueOf(horario.getCodigoCurso()));
            FieldCatedratico.setText(String.valueOf(horario.getCodeCatedratico()));
            ComboDia.setSelectedItem(horario.getDia());
        } else {
            ButtonModificar.setEnabled(false);
        }
    }

    private void llenarTablasDeSeleccion() {
        this.llenarTablaCursos();
        this.llenarTablaCatedraticos();
        this.llenarTablaHorarios();
    }

    private void limpiarTablaCursos() {
        DefaultTableModel model = (DefaultTableModel) this.TablaCursos.getModel();

        if (model.getRowCount() > 0) {
            do {
                model.removeRow(0);
            } while (model.getRowCount() != 0);
        }
    }

    private void llenarTablaCursos() {
        this.limpiarTablaCursos();
        if (this.datosSistema.getCursos().getLegth() > 0) {
            ButtonModificar.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel) this.TablaCursos.getModel();
            Curso[] listToArray = this.datosSistema.getCursos().listToArray(Curso[].class);
            for (Curso curso : listToArray) {
                model.addRow(new Object[]{curso.getCodigo(), curso.getNombre()});
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay cursos registrados en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
            ButtonModificar.setEnabled(false);
        }

    }

    private void llenarTablaCatedraticos() {
        this.limpiarTablaCatedraticos();
        if (!this.datosSistema.getCatedraticos().isEmpty()) {
            ButtonModificar.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel) TablaCatedratico.getModel();
            Catedratico[] AVLtoArrayInOrden = this.datosSistema.getCatedraticos().AVLtoArrayInOrden(Catedratico[].class);
            for (Catedratico catedratico : AVLtoArrayInOrden) {
                model.addRow(new Object[]{catedratico.getId(), catedratico.getNombre()});
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay catedraticos registrados en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
            ButtonModificar.setEnabled(false);
        }
    }

    private void limpiarTablaCatedraticos() {
        DefaultTableModel model = (DefaultTableModel) this.TablaCatedratico.getModel();
        if (model.getRowCount() > 0) {
            do {
                model.removeRow(0);
            } while (model.getRowCount() != 0);
        }
    }

    private String recuperarHora() {
        String hora1 = FieldHora1.getText();
        String hora2 = FieldHora2.getText();
        if (this.pruebaHora(hora1)) {
            if (this.pruebaHora(hora2)) {
                String tiempo1 = ComboHora1.getItemAt(ComboHora1.getSelectedIndex());
                String tiempo2 = ComboHora2.getItemAt(ComboHora2.getSelectedIndex());
                return hora1 + tiempo1 + "-" + hora2 + tiempo2;
            } else {
                return "";
            }

        } else {
            return "";
        }
    }
    private boolean pruebaHora(String text) {
        Pattern pattern = Pattern.compile("^([0]?[1-9]|[1][0-2])([:])([0-5][0-9])$");
        Matcher matcher = pattern.matcher(text);
        return matcher.find();
    }

    private void llenarTablaHorarios() {
        this.limpiarTablaHorarios();
        if (!this.datosSistema.getHorarios().isEmpty()) {
            this.ButtonModificar.setEnabled(true);
            DefaultTableModel model = (DefaultTableModel) this.TablaHorarios.getModel();
            Horario[] AVLtoArrayInOrden = this.datosSistema.getHorarios().AVLtoArrayInOrden(Horario[].class);
            for (Horario horario : AVLtoArrayInOrden) {
                Catedratico catedratico = this.datosSistema.getCatedraticos().buscar(String.valueOf(horario.getCodeCatedratico()));
                Curso curso = this.datosSistema.getCursos().buscar(String.valueOf(horario.getCodigoCurso()));
                model.addRow(new Object[]{horario.getCodigo(), horario.getHora(), horario.getDia(), ((curso == null) ? "null" : curso.getNombre()), horario.getSalon(), horario.getEdificio(), ((catedratico == null) ? "null" : catedratico.getNombre()), horario.getAsignaciones().getLegth()});
            }
        } else {
            JOptionPane.showMessageDialog(this, "No hay horarios en el sistema", "Error", JOptionPane.WARNING_MESSAGE);
            this.ButtonModificar.setEnabled(false);
        }
    }

    private void limpiarTablaHorarios() {
        DefaultTableModel model = (DefaultTableModel) this.TablaHorarios.getModel();
        if (model.getRowCount() > 0) {
            do {
                model.removeRow(0);
            } while (model.getRowCount() != 0);
        }
    }

}
